{"name":"Lang","qualifiedName":"dloc/dloc_base.Lang","comment":"<p>Static information relative to a single language.</p>","isAbstract":false,"superclass":"dart:core.Object","implements":[],"subclass":[],"variables":{"cmtMultiEnds":{"name":"cmtMultiEnds","qualifiedName":"dloc/dloc_base.Lang.cmtMultiEnds","comment":"<p>Language multi line comment end.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart:core.List","inner":[{"outer":"dart:core.String","inner":[]}]}],"annotations":[]},"cmtMultiStarts":{"name":"cmtMultiStarts","qualifiedName":"dloc/dloc_base.Lang.cmtMultiStarts","comment":"<p>Language multi line comment start.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart:core.List","inner":[{"outer":"dart:core.String","inner":[]}]}],"annotations":[]},"cmtSingle":{"name":"cmtSingle","qualifiedName":"dloc/dloc_base.Lang.cmtSingle","comment":"<p>Language single line comment.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart:core.RegExp","inner":[]}],"annotations":[]},"desc":{"name":"desc","qualifiedName":"dloc/dloc_base.Lang.desc","comment":"<p>Language human readable description.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart:core.String","inner":[]}],"annotations":[]},"ext":{"name":"ext","qualifiedName":"dloc/dloc_base.Lang.ext","comment":"<p>Language file extension.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart:core.RegExp","inner":[]}],"annotations":[]},"marginLgth":{"name":"marginLgth","qualifiedName":"dloc/dloc_base.Lang.marginLgth","comment":"<p>Some languages use a margin.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart:core.int","inner":[]}],"annotations":[]},"rmInline":{"name":"rmInline","qualifiedName":"dloc/dloc_base.Lang.rmInline","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart:core.RegExp","inner":[]}],"annotations":[]},"rmMatches":{"name":"rmMatches","qualifiedName":"dloc/dloc_base.Lang.rmMatches","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart:core.RegExp","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dloc/dloc_base.Lang.Lang-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"ext":{"name":"ext","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"desc":{"name":"desc","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"cmtSingle":{"name":"cmtSingle","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSingle":{"name":"noSingle","qualifiedName":"dloc/dloc_base.Lang.Lang-noSingle","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"ext":{"name":"ext","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"desc":{"name":"desc","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"withMargin":{"name":"withMargin","qualifiedName":"dloc/dloc_base.Lang.withMargin","comment":"","commentFrom":"dloc_base.Lang.withMargin","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"marginLgth":{"name":"marginLgth","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"withMulti":{"name":"withMulti","qualifiedName":"dloc/dloc_base.Lang.withMulti","comment":"","commentFrom":"dloc_base.Lang.withMulti","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"cmtMultiStart":{"name":"cmtMultiStart","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"cmtMultiEnd":{"name":"cmtMultiEnd","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"withRmInline":{"name":"withRmInline","qualifiedName":"dloc/dloc_base.Lang.withRmInline","comment":"","commentFrom":"dloc_base.Lang.withRmInline","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"rmInline":{"name":"rmInline","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"withRmMatches":{"name":"withRmMatches","qualifiedName":"dloc/dloc_base.Lang.withRmMatches","comment":"","commentFrom":"dloc_base.Lang.withRmMatches","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"rmMatches":{"name":"rmMatches","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dloc/dloc_base.Lang.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dloc/dloc_base.Lang.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dloc/dloc_base.Lang.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dloc/dloc_base.Lang.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart:core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dloc/dloc_base.Lang.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dloc/dloc_base.Lang.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dloc/dloc_base.Lang.noSuchMethod","comment":"<p><a>dloc/dloc_base.Lang.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dloc/dloc_base.Lang.noSuchMethod</a> in an <a>dart:core.Invocation</a>.\nIf <a>dloc/dloc_base.Lang.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dloc/dloc_base.Lang.noSuchMethod</a> is to throw a\n<a>dart:core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dloc/dloc_base.Lang.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}