{"name":"IndexError","qualifiedName":"dart:core.IndexError","comment":"<p>A specialized <a>dart:core.RangeError</a> used when an index is not in the range\n<code>0..indexable.length-1</code>.</p>\n<p>Also contains the indexable object, its length at the time of the error,\nand the invalid index itself.</p>","isAbstract":false,"superclass":"dart:core.ArgumentError","implements":["dart:core.RangeError"],"subclass":[],"variables":{"indexable":{"name":"indexable","qualifiedName":"dart:core.IndexError.indexable","comment":"<p>The indexable object that index was not a valid index into.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"length":{"name":"length","qualifiedName":"dart:core.IndexError.length","comment":"<p>The length of <a>dart:core.IndexError.indexable</a> at the time of the error.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart:core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{"invalidValue":{"name":"invalidValue","qualifiedName":"dart:core.ArgumentError.invalidValue","comment":"<p>The invalid value.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"message":{"name":"message","qualifiedName":"dart:core.ArgumentError.message","comment":"<p>Message describing the problem.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"name":{"name":"name","qualifiedName":"dart:core.ArgumentError.name","comment":"<p>Name of the invalid argument, if available.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart:core.String","inner":[]}],"annotations":[]},"end":{"name":"end","qualifiedName":"dart:core.RangeError.end","comment":"<p>The maximum value that value is allowed to assume.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart:core.num","inner":[]}],"annotations":[]},"start":{"name":"start","qualifiedName":"dart:core.RangeError.start","comment":"<p>The minimum value that value is allowed to assume.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart:core.num","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{"end":{"name":"end","qualifiedName":"dart:core.IndexError.end","comment":"","commentFrom":"dart:core.IndexError.end","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.int","inner":[]}],"parameters":{},"annotations":[]},"start":{"name":"start","qualifiedName":"dart:core.IndexError.start","comment":"","commentFrom":"dart:core.IndexError.start","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart:core.IndexError.IndexError-","comment":"<p>Creates a new <a>dart:core.IndexError</a> stating that <a>dart:core.IndexError.IndexError-.invalidValue</a> is not a valid index\ninto <a>dart:core.IndexError.IndexError-.indexable</a>.</p>\n<p>The <a>dart:core.IndexError.IndexError-.length</a> is the length of <a>dart:core.IndexError.IndexError-.indexable</a> at the time of the error.\nIf <code>length</code> is omitted, it defaults to <code>indexable.length</code>.</p>\n<p>The message is used as part of the string representation of the error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invalidValue":{"name":"invalidValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.int","inner":[]}],"value":null,"annotations":[]},"indexable":{"name":"indexable","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"message":{"name":"message","optional":true,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart:core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart:core.IndexError.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart:core.IndexError.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart:core.IndexError.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.Type","inner":[]}],"parameters":{},"annotations":[]},"stackTrace":{"name":"stackTrace","qualifiedName":"dart:core.IndexError.stackTrace","comment":"","commentFrom":"","inheritedFrom":"dart:core.Error.stackTrace","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.StackTrace","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart:core.IndexError.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart:core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart:core.IndexError.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart:core.IndexError.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart:core.IndexError.noSuchMethod","comment":"<p><a>dart:core.IndexError.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart:core.IndexError.noSuchMethod</a> in an <a>dart:core.Invocation</a>.\nIf <a>dart:core.IndexError.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart:core.IndexError.noSuchMethod</a> is to throw a\n<a>dart:core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart:core.IndexError.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart:core.Object.toString","inheritedFrom":"dart:core.ArgumentError.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}