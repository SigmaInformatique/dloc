{"name":"ArgumentError","qualifiedName":"dart:core.ArgumentError","comment":"<p>Error thrown when a function is passed an unacceptable argument.</p>","isAbstract":false,"superclass":"dart:core.Error","implements":[],"subclass":["dart:core.IndexError","dart:core.RangeError"],"variables":{"invalidValue":{"name":"invalidValue","qualifiedName":"dart:core.ArgumentError.invalidValue","comment":"<p>The invalid value.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"message":{"name":"message","qualifiedName":"dart:core.ArgumentError.message","comment":"<p>Message describing the problem.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"name":{"name":"name","qualifiedName":"dart:core.ArgumentError.name","comment":"<p>Name of the invalid argument, if available.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart:core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart:core.ArgumentError.ArgumentError-","comment":"<p>The <a>dart:core.ArgumentError.ArgumentError-.message</a> describes the erroneous argument.</p>\n<p>Existing code may be using <code>message</code> to hold the invalid value.\nIf the <code>message</code> is not a <a>dart:core.String</a>, it is assumed to be a value instead\nof a message.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"message":{"name":"message","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"notNull":{"name":"notNull","qualifiedName":"dart:core.ArgumentError.ArgumentError-notNull","comment":"<p>Create an argument error for a <code>null</code> argument that must not be <code>null</code>.</p>\n<p>Shorthand for calling <a>dart:core.ArgumentError.ArgumentError-value</a> with a <code>null</code> value and a\nmessage of <code>\"Must not be null\"</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":true,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"value":{"name":"value","qualifiedName":"dart:core.ArgumentError.ArgumentError-value","comment":"<p>Creates error containing the invalid <a>dart:core.ArgumentError.ArgumentError-value.value</a>.</p>\n<p>A message is built by suffixing the <a>dart:core.ArgumentError.ArgumentError-value.message</a> argument with\nthe <a>dart:core.ArgumentError.ArgumentError-value.name</a> argument (if provided) and the value. Example</p>\n<p>   \"Invalid argument (foo): null\"</p>\n<p>The <code>name</code> should match the argument name of the function, but if\nthe function is a method implementing an interface, and its argument\nnames differ from the interface, it might be more useful to use the\ninterface method's argument name (or just rename arguments to match).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"message":{"name":"message","optional":true,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"toString":{"name":"toString","qualifiedName":"dart:core.ArgumentError.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart:core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart:core.ArgumentError.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart:core.ArgumentError.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart:core.ArgumentError.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.Type","inner":[]}],"parameters":{},"annotations":[]},"stackTrace":{"name":"stackTrace","qualifiedName":"dart:core.ArgumentError.stackTrace","comment":"","commentFrom":"","inheritedFrom":"dart:core.Error.stackTrace","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.StackTrace","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart:core.ArgumentError.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart:core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart:core.ArgumentError.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart:core.ArgumentError.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart:core.ArgumentError.noSuchMethod","comment":"<p><a>dart:core.ArgumentError.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart:core.ArgumentError.noSuchMethod</a> in an <a>dart:core.Invocation</a>.\nIf <a>dart:core.ArgumentError.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart:core.ArgumentError.noSuchMethod</a> is to throw a\n<a>dart:core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart:core.ArgumentError.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}